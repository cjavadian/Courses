#lang eopl

;PART 0
(define (keep-evens list-of-ints)
  (if (equal? list-of-ints '())
      '()
      (if (equal? (modulo (car list-of-ints) 2) 0)
          (append (list(car list-of-ints)) (keep-evens (cdr list-of-ints)))
          (keep-evens (cdr list-of-ints)))))

(define (filter predicate? list-of-things)
  (if (equal? list-of-things '())
      '()
      (if (predicate? (car list-of-things))
          (append (list (car list-of-things)) (filter predicate? (cdr list-of-things)))
          (filter predicate? (cdr list-of-things)))))

(display (filter even? '(1 2 3 4 5 6)))


;PART 1 EUCLIDIAN ALGORITHM 

(define (EuclidAlgo a d)
    (if (equal? (modulo a d) 0)
        d
        (EuclidAlgo d (modulo a d))))

(define (Euclid-list a d)
  (if (equal? (modulo a d) 0)
      '()
      (append (Euclid-list d (modulo a d)) (list (modulo a d)))))

(display (Euclid-list 55 35))
;(display (Euclid-list 55 34))
;(display (Euclid-list 55 33))
;(display (Euclid-list 55 32))


;PART 2 SIEVE

(define (integers n)
  (cdr (reverse (Integers n))))

(define (Integers n)
  (if (= 0 n) 
      '()
      (cons n (Integers (- n 1)))))

;(display (integers 50))

(define (sieve n)
  (Sieve (integers n)))

(define (Sieve list-of-ints)
  (if (null? list-of-ints)
  	'()
  	(cons (car list-of-ints) (Sieve (cross-out (car list-of-ints) (cdr list-of-ints))))))

(define (cross-out prime list-of-ints)
  (if (equal? list-of-ints '())
  	'()
  	(if (equal? (modulo (car list-of-ints) prime) 0)
      	(cross-out prime (cdr list-of-ints))
      	(cons (car list-of-ints) (cross-out prime (cdr list-of-ints))))))

(display (sieve 314))

(define (pi n)
  (length (sieve n)))

(display (pi 314))


;PART 3 PRIME

(define (sieve-prime? n)
  (if (member n (sieve n))
  	#t
  	#f))

(define (prime? n)
  (Prime? 2 n))

(define (Prime? divisor n)
  (if (equal? divisor n)
  	#t
  	(if (equal? (modulo n divisor) 0)
      	#f
      	(Prime? (+ divisor 1) n))))

(display (prime? 314))


;PART 4 FACTORING

(define (factor n)
  (Factor 2 n))

(define (Factor divisor n)
  (if (> divisor n)
  	'()
  	(if (equal? (modulo n divisor) 0)
      	(cons divisor (Factor divisor (/ n divisor)))
      	(Factor (+ divisor 1) n))))

(define (filter-prime list) ;golden ticket
  (filter prime? list))

(display (factor 126))

;(define pal-dro-beans '(1111111 1113111 1117111 1131311 1133311 1137311 1171711 1173711 1177711 1311131 1313131 1317131 1331331 1333331 1337331 1371731 1373731 1377731 1711171 1713171 1717171 1731371 1733371 1737371 1771771 1773771 1777771 3111113 3113113 3117113 3131313 3133313 3137313 3171713 3173713 3177713 3311133 3313133 3317133 3331333 3333333 3337333 3371733 3373733 3377733 3711173 3713173 3717173 3731373 3733373 3737373 3771773 3773773 3777773 7111117 7113117 7117117 7131317 7133317 7137317 7171717 7173717 7177717 7311137 7313137 7317137 7331337 7333337 7337337 7371737 7373737 7377737 7711177 7713177 7717177 7731377 7733377 7737377 7771777 7773777 7777777))
;(define cool-beans    '(1111111 1113111 1117111 1119111 1131311 1133311 1137311 1139311 1171711 1173711 1177711 1179711 1191911 1193911 1197911 1199911 1311131 1313131 1317131 1319131 1331331 1333331 1337331 1339331 1371731 1373731 1377731 1379731 1391931 1393931 1397931 1399931 1711171 1713171 1717171 1719171 1731371 1733371 1737371 1739371 1771771 1773771 1777771 1779771 1791971 1793971 1797971 1799971 1911191 1913191 1917191 1919191 1931391 1933391 1937391 1939391 1971791 1973791 1977791 1979791 1991991 1993991 1997991 1999991 3111113 3113113 3117113 3119113 3131313 3133313 3137313 3139313 3171713 3173713 3177713 3179713 3191913 3193913 3197913 3199913 3311133 3313133 3317133 3319133 3331333 3333333 3337333 3339333 3371733 3373733 3377733 3379733 3391933 3393933 3397933 3399933 3711173 3713173 3717173 3719173 3731373 3733373 3737373 3739373 3771773 3773773 3777773 3779773 3791973 3793973 3797973 3799973 3911193 3913193 3917193 3919193 3931393 3933393 3937393 3939393 3971793 3973793 3977793 3979793 3991993 3993993 3997993 3999993 7111117 7113117 7117117 7119117 7131317 7133317 7137317 7139317 7171717 7173717 7177717 7179717 7191917 7193917 7197917 7199917 7311137 7313137 7317137 7319137 7331337 7333337 7337337 7339337 7371737 7373737 7377737 7379737 7391937 7393937 7397937 7399937 7711177 7713177 7717177 7719177 7731377 7733377 7737377 7739377 7771777 7773777 7777777 7779777 7791977 7793977 7797977 7799977 7911197 7913197 7917197 7919197 7931397 7933397 7937397 7939397 7971797 7973797 7977797 7979797 7991997 7993997 7997997 7999997 9111119 9113119 9117119 9119119 9131319 9133319 9137319 9139319 9171719 9173719 9177719 9179719 9191919 9193919 9197919 9199919 9311139 9313139 9317139 9319139 9331339 9333339 9337339 9339339 9371739 9373739 9377739 9379739 9391939 9393939 9397939 9399939 9711179 9713179 9717179 9719179 9731379 9733379 9737379 9739379 9771779 9773779 9777779 9779779 9791979 9793979 9797979 9799979 9911199 9913199 9917199 9919199 9931399 9933399 9937399 9939399 9971799 9973799 9977799 9979799 9991999 9993999 9997999 9999999))

;(display (filter-prime pal-dro-beans))
(display (filter-prime cool-beans))
