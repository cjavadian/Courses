#lang eopl

;PART 0

(define (element? item list-of-items)
  (if (null? list-of-items)
      #f
      (if (equal? item (car list-of-items))
          #t
          (element? item (cdr list-of-items)))))

(define (make-set list-of-items)
  (cond [(null? list-of-items)
         '()]
        [(element? (car list-of-items) (cdr list-of-items))
         (make-set (cdr list-of-items))]
        [else
         (cons (car list-of-items) (make-set (cdr list-of-items)))]))
;(display (make-set '(1 5 2 3 5 1)))
;(display (element? 7 '(1 2 3)))

;PART 1

;THIS ONE PRINTS FUNNY
(define (union setA setB)
  (make-set (append setA setB)))

;(display (union '(1 2 3) '(4 5 6)))

(define (intersection setA setB)
  (if (null? setA) 
      '()
      (if (element? (car setA) setB)
          (cons (car setA) (intersection (cdr setA) setB))
          (intersection (cdr setA) setB))))

(display (intersection '(1 2 3 3) '(3 4 5)))

;PART 2

(define (subset? setA setB)
  (cond [(null? setA) 
         #t]
        [(element? (car setA) setB)
         (subset? (cdr setA)  setB)]
        [else #f]))

;(display (subset? '(1 2 3) '(5 4 3 2 1)))
;(display (subset? '(1 2 3) '(5)))
;(display (subset? '() '()))

(define (set-equal? setA setB)
  (subset? setA setB)
  )

;(display (set-equal? '(1 2 3) '(3 2 1)))

(define (proper-subset? setA setB)
  (cond [(equal? setA setB) #f]
        [else (subset? setA setB)]
        ))
;(display (proper-subset? '(1 2 3) '(1 2 3)))

;PART 3

(define (set-difference setA setB)
  (make-set (Set-Difference setA setB)))

(define (Set-Difference setA setB)
  (cond [(equal? setA setB) '()]
        [(equal? (car setA) (car setB)) (set-difference (cdr setA) (cdr setB))]
  )
  )
;(display (set-difference '(1 2 3) '(2 3 4)))

(define (sym-diff setA setB)
  (set-difference setA setB))



;PART 4 

(define (cardinality set)
  ((display "hello")
  ))

(newline display (cardinality '(1 2 3)))
(display (cardinality '(1 1 2 3 3)))